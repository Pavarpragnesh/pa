To connect a React application to a MongoDB database (e.g., using MongoDB Compass for visualization) and manage a student table (collection in MongoDB terminology), follow these steps:

1. Set Up MongoDB
Install MongoDB and start the server.
Use MongoDB Compass to create a database and collection:
Database: pavar
Collection: student
2. Back-End Setup
Use Node.js with Express and MongoDB driver or Mongoose to handle database interactions.

Install Dependencies
Run the following in your backend folder:

bash
Copy code
npm install express mongoose cors body-parser
Create an Express Server
Create a server.js file:

javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(cors());

// MongoDB Connection
const uri = "mongodb://localhost:27017/pavar"; // Replace with your URI
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB Connected'))
    .catch(err => console.error(err));

// Student Schema and Model
const studentSchema = new mongoose.Schema({
    name: String,
    age: Number,
    grade: String
}, { timestamps: true });

const Student = mongoose.model('Student', studentSchema);

// Routes
app.get('/students', async (req, res) => {
    try {
        const students = await Student.find();
        res.json(students);
    } catch (err) {
        res.status(500).send(err);
    }
});

app.post('/students', async (req, res) => {
    try {
        const student = new Student(req.body);
        await student.save();
        res.status(201).json(student);
    } catch (err) {
        res.status(400).send(err);
    }
});

app.listen(5000, () => console.log('Server running on port 5000'));
3. React Front-End Setup
Install Axios for making HTTP requests:

bash
Copy code
npm install axios
Create the Student Component
javascript
Copy code
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const Student = () => {
    const [students, setStudents] = useState([]);
    const [form, setForm] = useState({ name: '', age: '', grade: '' });

    useEffect(() => {
        fetchStudents();
    }, []);

    const fetchStudents = async () => {
        try {
            const { data } = await axios.get('http://localhost:5000/students');
            setStudents(data);
        } catch (error) {
            console.error('Error fetching students:', error);
        }
    };

    const addStudent = async () => {
        try {
            await axios.post('http://localhost:5000/students', form);
            fetchStudents();
            setForm({ name: '', age: '', grade: '' });
        } catch (error) {
            console.error('Error adding student:', error);
        }
    };

    return (
        <div>
            <h1>Student List</h1>
            <ul>
                {students.map((student) => (
                    <li key={student._id}>
                        {student.name} - {student.age} years old - Grade: {student.grade}
                    </li>
                ))}
            </ul>
            <h2>Add Student</h2>
            <input
                type="text"
                placeholder="Name"
                value={form.name}
                onChange={(e) => setForm({ ...form, name: e.target.value })}
            />
            <input
                type="number"
                placeholder="Age"
                value={form.age}
                onChange={(e) => setForm({ ...form, age: e.target.value })}
            />
            <input
                type="text"
                placeholder="Grade"
                value={form.grade}
                onChange={(e) => setForm({ ...form, grade: e.target.value })}
            />
            <button onClick={addStudent}>Add</button>
        </div>
    );
};

export default Student;
4. Start Both Servers
Backend: Run node server.js
Frontend: Run npm start in your React project.
5. Verify in MongoDB Compass
Open MongoDB Compass and connect to the database.
Select the pavar database and view the student collection to confirm the data is being saved.
This setup allows you to manage a student collection in MongoDB from a React frontend.
